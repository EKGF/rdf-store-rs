var searchIndex = new Map(JSON.parse('[\
["rdf_store_rs",{"doc":"rdf-store-rs","t":"PPPPPPPFPPPGPPPPPPPPPPPPFPPPPPPPPPFPPFFUPPPPFPPPPPPFPGPPPGPPPPPPPPPPPPPPPPOOCCCOOOCCOOOCOOOOOOOCOOOCHOOCOOOOOOOOOOOOOOHFNNNNNNNNNNNNNNNNOONNNNNNNPPPPJGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPPGPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOFFNNNNNNNNNNNNNNNNNNNNNNNONNNNOONNNNNNNNNNNNEEEECCCCFNNNNNNNONNONNNNNFNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNONNNNNUOONNOONNNNNNNONNNNNNNNOONNNOFNNNNNNNNNNNNNNNOONNNNNNNFNNNNNNNNNNNOONNNNNPPPGNNNNNNNNNNNNNNNNNNN","n":["AnyUri","BlankNode","BlankNode","Boolean","Byte","CApiError","CannotGetAnyArgumentIndexes","Class","CouldNotConnectToServer","CouldNotCreateRDFoxServer","CouldNotImportRDFFile","DataType","Date","DateParseError","DateTime","DateTimeStamp","Day","DayTimeDuration","Decimal","Double","Duration","ExceededMaximumNumberOfRows","Exception","Float","Graph","IOError","Int","Integer","InvalidLiteral","InvalidPrefixName","Iri","IriParseError","IriReference","IriStringParseError","Literal","Literal","Literal","LiteralIdUrlDisplay","LiteralUrlDisplay","LiteralValue","Long","Month","MonthDay","MultiplicityExceededMaximumNumberOfRows","Namespace","NegativeInteger","NonNegativeInteger","NonPositiveInteger","ParseIntError","PlainLiteral","PositiveInteger","Predicate","R2D2Error","RDFStoreError","RDFoxLicenseFileNotFound","Short","String","Term","Time","UnboundValue","Unknown","UnknownDataType","UnknownNTriplesValue","UnknownResourceException","UnknownValueForDataType","UnknownXsdDataType","UnsignedByte","UnsignedInt","UnsignedLong","UnsignedShort","WalkError","Year","YearMonth","YearMonthDuration","blank_node","boolean","c_utils","class","data_type","data_type","date","date_time","error","graph","id_base_iri","iri","iri","literal","literal","literal","literal_value","local_name","local_name","local_name","name","namespace","namespace","namespace","namespace","predicate","ptr_to_cstr","signed_integer","string","term","unsigned_integer","action","data_type","data_type_id","data_type_iri","maxrow","maxrow","message","multiplicity","query","query","query","value","value","ptr_to_cstr","Class","as_iri","borrow","borrow_mut","clone","clone_into","declare","deref","deref_mut","display_turtle","drop","fmt","fmt","from","init","into","is_literal","local_name","namespace","plural_label","to_owned","to_string","try_from","try_into","try_to_string","type_id","AnyUri","BlankNode","Boolean","Byte","DATA_TYPE_MAP","DataType","Date","DateTime","DateTimeStamp","Day","DayTimeDuration","Decimal","Double","Duration","Float","Int","Integer","IriReference","Literal","Long","Month","MonthDay","NegativeInteger","NonNegativeInteger","NonPositiveInteger","PlainLiteral","PositiveInteger","Short","String","Time","UnboundValue","UnsignedByte","UnsignedInt","UnsignedLong","UnsignedShort","Year","YearMonth","YearMonthDuration","as_xsd_iri_str","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","from_datatype_id","from_xsd_iri","hash","init","into","is_blank_node","is_boolean","is_date","is_date_time","is_date_time_stamp","is_decimal","is_duration","is_integer","is_iri","is_signed_integer","is_string","is_unsigned_integer","to_owned","try_from","try_from","try_from_primitive","try_into","type_id","CApiError","CannotGetAnyArgumentIndexes","CouldNotConnectToServer","CouldNotCreateRDFoxServer","CouldNotImportRDFFile","DateParseError","ExceededMaximumNumberOfRows","Exception","IOError","InvalidLiteral","InvalidPrefixName","IriParseError","IriStringParseError","MultiplicityExceededMaximumNumberOfRows","ParseIntError","R2D2Error","RDFStoreError","RDFoxLicenseFileNotFound","Unknown","UnknownDataType","UnknownNTriplesValue","UnknownResourceException","UnknownValueForDataType","UnknownXsdDataType","WalkError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","from","init","into","source","to_string","try_from","try_into","try_to_string","type_id","action","data_type","data_type_id","data_type_iri","maxrow","maxrow","message","multiplicity","query","query","query","value","value","Graph","GraphDisplayIRI","as_c_string","as_display_iri","as_iri_buf","as_lexical_value","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dataset_from_path","declare","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","from","from","graph","init","init","into","into","local_name","namespace","test_dataset_from_path","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","try_to_string","try_to_string","type_id","type_id","Literal","LiteralIdUrlDisplay","LiteralUrlDisplay","LiteralValue","id_url_display","this","url_display","value","LiteralIdUrlDisplay","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","id_base_iri","init","into","literal","to_string","try_from","try_into","try_to_string","type_id","Literal","as_boolean","as_date","as_date_time","as_decimal","as_duration","as_id","as_id_url_display","as_iri","as_local_name","as_signed_long","as_str","as_string","as_term","as_unsigned_long","as_url_display","borrow","borrow_mut","clone","clone_into","data_type","date_from_str","default","deref","deref_mut","display_json","display_turtle","drop","eq","fmt","fmt","from","from","from_iri","from_str","from_type_and_buffer","from_type_and_c_buffer","hash","init","into","is_id_iri","literal_value","new_blank_node_with_datatype","new_boolean","new_boolean_from_string","new_boolean_from_string_with_datatype","new_boolean_with_datatype","new_date_time_with_datatype","new_date_with_datatype","new_decimal_with_datatype","new_duration_with_datatype","new_iri_from_string_with_datatype","new_iri_reference_from_str","new_iri_with_datatype","new_plain_literal_boolean","new_plain_literal_string","new_signed_integer","new_signed_integer_with_datatype","new_string_with_datatype","new_unsigned_integer","new_unsigned_integer_with_datatype","to_owned","to_string","try_from","try_into","try_to_string","type_id","LiteralUrlDisplay","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","literal","to_string","try_from","try_into","try_to_string","type_id","LiteralValue","blank_node","boolean","borrow","borrow_mut","date","date_time","default","deref","deref_mut","drop","from","init","into","iri","new_blank_node","new_boolean","new_date","new_date_time","new_iri","new_signed_integer","new_string","new_unsigned_integer","signed_integer","string","try_from","try_into","type_id","unsigned_integer","Namespace","borrow","borrow_mut","clone","clone_into","declare","declare_from_str","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","iri","name","to_owned","to_string","try_from","try_into","try_to_string","type_id","with_local_name","Predicate","borrow","borrow_mut","declare","deref","deref_mut","display_turtle","drop","fmt","from","init","into","local_name","namespace","to_string","try_from","try_into","try_to_string","type_id","BlankNode","Iri","Literal","Term","borrow","borrow_mut","deref","deref_mut","display_turtle","drop","fmt","from","from","from_str","init","into","new_blank_node","new_iri","new_iri_from_str","new_str","try_from","try_into","type_id"],"q":[[0,"rdf_store_rs"],[105,"rdf_store_rs::RDFStoreError"],[118,"rdf_store_rs::c_utils"],[119,"rdf_store_rs::class"],[145,"rdf_store_rs::data_type"],[218,"rdf_store_rs::error"],[267,"rdf_store_rs::error::RDFStoreError"],[280,"rdf_store_rs::graph"],[324,"rdf_store_rs::literal"],[332,"rdf_store_rs::literal::id_url_display"],[349,"rdf_store_rs::literal::this"],[416,"rdf_store_rs::literal::url_display"],[432,"rdf_store_rs::literal::value"],[461,"rdf_store_rs::namespace"],[486,"rdf_store_rs::predicate"],[505,"rdf_store_rs::term"],[528,"core::ffi::c_str"],[529,"core::result"],[530,"iref::iri::buffer"],[531,"core::fmt"],[532,"core::fmt"],[533,"alloc::collections"],[534,"core::any"],[535,"core::hash"],[536,"num_enum"],[537,"core::num::error"],[538,"chrono::format"],[539,"std::io::error"],[540,"ignore"],[541,"r2d2"],[542,"iri_string::validate"],[543,"iref::iri"],[544,"alloc::ffi::c_str"],[545,"core::error"],[546,"core::option"],[547,"alloc::ffi::c_str"],[548,"chrono::naive::date"],[549,"chrono::offset::utc"],[550,"chrono::datetime"],[551,"iref::iri"]],"d":["XSD_ANY_URI","BLANK_NODE","","XSD_BOOLEAN","XSD_BYTE","","","The <code>Class</code> struct represents an RDFS or OWL class identifier","","","","The XSD DataType of a given <code>Literal</code>.","XSD_DATE","","XSD_DATE_TIME","XSD_DATE_TIME_STAMP","XSD_G_DAY","XSD_DAY_TIME_DURATION","XSD_DECIMAL","XSD_DOUBLE","XSD_DURATION","","","XSD_FLOAT","Similar to <code>Class</code>, the <code>Graph</code> struct represents an RDF named …","Represents all other cases of <code>std::io::Error</code>.","XSD_INT","XSD_INTEGER","","","","","IRI_REFERENCE","","Literals are used for values such as strings, numbers, and …","RDFS_LITERAL","","","","A <code>LiteralValue</code> is, together with a <code>DataType</code>, part of a …","XSD_LONG","XSD_G_MONTH","XSD_G_MONTH_DAY","","A <code>Namespace</code> represents a namespace IRI that can also be …","XSD_NEGATIVE_INTEGER","XSD_NON_NEGATIVE_INTEGER","XSD_NON_POSITIVE_INTEGER","","RDF_PLAIN_LITERAL","XSD_POSITIVE_INTEGER","","","","","XSD_SHORT","XSD_STRING","An RDF Term is either an IRI, a literal or a blank node.","XSD_TIME","INVALID_DATATYPE","","","","","","","XSD_UNSIGNED_BYTE","XSD_UNSIGNED_INT","XSD_UNSIGNED_LONG","XSD_UNSIGNED_SHORT","Represents all other cases of <code>ignore::Error</code> (see …","XSD_G_YEAR","XSD_G_YEAR_MONTH","XSD_YEAR_MONTH_DURATION","","","","","","","","","","","","","assumed to end with either ‘/’ or ‘#’","","","","","","","","assumed to end with ‘:’","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Class</code> struct represents an RDFS or OWL class identifier","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","XSD_ANY_URI","BLANK_NODE","XSD_BOOLEAN","XSD_BYTE","","The XSD DataType of a given <code>Literal</code>.","XSD_DATE","XSD_DATE_TIME","XSD_DATE_TIME_STAMP","XSD_G_DAY","XSD_DAY_TIME_DURATION","XSD_DECIMAL","XSD_DOUBLE","XSD_DURATION","XSD_FLOAT","XSD_INT","XSD_INTEGER","IRI_REFERENCE","RDFS_LITERAL","XSD_LONG","XSD_G_MONTH","XSD_G_MONTH_DAY","XSD_NEGATIVE_INTEGER","XSD_NON_NEGATIVE_INTEGER","XSD_NON_POSITIVE_INTEGER","RDF_PLAIN_LITERAL","XSD_POSITIVE_INTEGER","XSD_SHORT","XSD_STRING","XSD_TIME","INVALID_DATATYPE","XSD_UNSIGNED_BYTE","XSD_UNSIGNED_INT","XSD_UNSIGNED_LONG","XSD_UNSIGNED_SHORT","XSD_G_YEAR","XSD_G_YEAR_MONTH","XSD_YEAR_MONTH_DURATION","","","","","","Choosing boolean here as the default type because the …","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents all other cases of <code>std::io::Error</code>.","","","","","","","","","","","","","","","","Represents all other cases of <code>ignore::Error</code> (see …","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","","","","","","","","","","","","","","Similar to <code>Class</code>, the <code>Graph</code> struct represents an RDF named …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>ToString::to_string</code>, but without panic on OOM.","<code>ToString::to_string</code>, but without panic on OOM.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","Literals are used for values such as strings, numbers, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Is the given Literal an IRI whose base is the given IRI?","","","","","","","","Use this only for naive dates (see …","","","","","","","","","","","","","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","A <code>LiteralValue</code> is, together with a <code>DataType</code>, part of a …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A <code>Namespace</code> represents a namespace IRI that can also be …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","assumed to end with either ‘/’ or ‘#’","assumed to end with ‘:’","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","Return an identifier based on the current namespace IRI …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","<code>ToString::to_string</code>, but without panic on OOM.","","","","","An RDF Term is either an IRI, a literal or a blank node.","","","","","Display a <code>Term</code> in human readable format.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[19,19,42,19,19,4,4,0,4,4,4,0,19,4,19,19,19,19,19,19,19,4,4,19,0,4,19,19,4,4,42,4,19,4,0,19,42,0,0,0,19,19,19,4,0,19,19,19,4,19,19,0,4,0,4,19,19,0,19,19,4,4,4,4,4,4,19,19,19,19,4,19,19,19,46,46,0,0,0,14,46,46,0,0,36,46,9,0,36,44,14,48,6,32,9,0,48,6,32,0,0,46,46,0,46,49,50,51,52,53,54,49,53,53,55,54,50,56,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,19,19,19,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,49,50,51,52,53,54,49,53,53,55,54,50,56,0,0,32,32,32,32,34,32,34,32,32,32,32,32,34,32,34,32,34,32,34,32,32,34,32,34,34,32,34,32,32,32,32,32,34,32,34,32,34,32,34,32,34,32,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,42,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42],"f":"````````````````````````````````````````````````````````````````````````````````````````````````````{{bd}{{j{fh}}}}`````````````````0`{l{{j{nh}}}}{ce{}{}}0{ll}{{ce}A`{}{}}{{AbAd}l}{dc{}}0{l{{`{Af}}}}{dA`}{{lAh}Aj}0{cc{}}{{}d}9{{lAl}An}``{lB`};{cB`{}}{c{{j{e}}}{}{}}0{c{{j{B`Bb}}}{}}{cBd{}}``````````````````````````````````````{BfAd}{ce{}{}}0{BfBf}{{ce}A`{}{}}{{}Bf}{dc{}}0?{{BfBf}An}{{BfAh}Aj}?{b{{j{Bfh}}}}{Ad{{j{Bfh}}}}{{Bfc}A`Bh}{{}d}:{BfAn}00000000000;{b{{j{Bf{Bj{Bf}}}}}}{c{{j{e}}}{}{}}{c{{j{Bf{Bj{Bf}}}}}{}}1{cBd{}}`````````````````````````??;;{dA`}{{hAh}Aj}0{Blh}{Bnh}{C`h}{cc{}}{Cbh}{Cdh}{Cfh}{Chh}{Cjh}{{}d}{ce{}{}}{h{{Cn{Cl}}}}{cB`{}}{c{{j{e}}}{}{}}0{c{{j{B`Bb}}}{}}{cBd{}}```````````````{D`{{j{Dbh}}}}{D`Dd}{D`{{j{nh}}}}{D`{{j{Alh}}}}9999{D`D`}{{ce}A`{}{}}{{AbDf}D`}{{AbAd}D`}{dc{}}000{dA`}0{{DdAh}Aj}{{D`Ah}Aj}0{cc{}}0`{{}d}0{ce{}{}}0``80{cB`{}}0{c{{j{e}}}{}{}}000{c{{j{B`Bb}}}{}}0{cBd{}}0`````````44::9{{DhAh}Aj}7`65`43321`{Al{{Cn{An}}}}{Al{{Cn{Dj}}}}{Al{{Cn{{Dn{Dl}}}}}}{Al{{Cn{Ad}}}}0{{Aln}Ad}{{Aln}Dh}{Al{{Cn{E`}}}}{Al{{Cn{B`}}}}{Al{{Cn{Eb}}}}51{AlEd}{Al{{Cn{Ef}}}}{AlEh}{ce{}{}}0{AlAl}{{ce}A`{}{}}`{Ad{{j{{Cn{Al}}h}}}}{{}Al}{dc{}}0{Al{{`{Af}}}}0{dA`}{{AlAl}An}{{AlAh}Aj}0{cc{}}{AdAl}{E`{{j{Alh}}}}{Ad{{j{Alc}}}{}}{{BfAd{Cn{n}}}{{j{{Cn{Al}}h}}}}{{Bf{Ej{b}}}{{j{{Cn{Al}}h}}}}{{Alc}A`Bh}{{}d}{ce{}{}}{{Aln}An}`{{AdBf}{{j{Alh}}}}{An{{j{Alh}}}}{Ad{{j{Alh}}}}2{{AnBf}{{j{Alh}}}}{{{Dn{Dl}}Bf}{{j{Alh}}}}{{DjBf}{{j{Alh}}}}55{{AdBf{Cn{n}}}{{j{Alh}}}}4{{E`Bf}{{j{Alh}}}}65{Eb{{j{Alh}}}}{{EbBf}{{j{Alh}}}}9{Ef{{j{Alh}}}}{{EfBf}{{j{Alh}}}}={cB`{}}{c{{j{e}}}{}{}}0{c{{j{B`Bb}}}{}}{cBd{}}`{ce{}{}}0{dc{}}0{dA`}{{EhAh}Aj}{cc{}}{{}d}5`98876```55``{{}El}554216`{AdEl}{AnEl}{DjEl}{{{Dn{Dl}}}El}{E`El}{EbEl}5{EfEl}``{c{{j{e}}}{}{}}0?``>>{AbAb}{{ce}A`{}{}}{{Adc}Ab{{En{E`}}}}{{AdAd}Ab}{dc{}}0{dA`}{{AbAb}An}{{AbAh}Aj}0{cc{}}{{}d}{ce{}{}}``0{cB`{}}<<{c{{j{B`Bb}}}{}}{cBd{}}{{AbAd}{{j{nCh}}}}`44{{AbAd}F`};;{F`{{`{Af}}}};{{F`Ah}Aj}987``6{c{{j{e}}}{}{}}065````88>>{Ed{{`{Af}}}}>{{EdAh}Aj}<{AlEd}{Ad{{j{Edc}}}{}}=<{Ad{{j{Edh}}}}{E`{{j{Edh}}}}1166;","c":[],"p":[[1,"u8"],[1,"usize"],[5,"CStr",528],[6,"RDFStoreError",218],[6,"Result",529],[5,"Class",119],[5,"IriBuf",530],[1,"unit"],[5,"Namespace",461],[1,"str"],[10,"Display",531],[5,"Formatter",531],[8,"Result",531],[5,"Literal",349],[1,"bool"],[5,"String",532],[5,"TryReserveError",533],[5,"TypeId",534],[6,"DataType",145],[10,"Hasher",535],[5,"TryFromPrimitiveError",536],[5,"ParseIntError",537],[5,"ParseError",538],[5,"Error",539],[6,"Error",540],[5,"Error",541],[5,"Error",542],[6,"Error",543],[5,"NulError",544],[10,"Error",545],[6,"Option",546],[5,"Graph",280],[5,"CString",544],[5,"GraphDisplayIRI",280],[5,"Path",547],[5,"LiteralIdUrlDisplay",332],[5,"NaiveDate",548],[5,"Utc",549],[5,"DateTime",550],[5,"Iri",543],[1,"i64"],[6,"Term",505],[1,"u64"],[5,"LiteralUrlDisplay",416],[1,"slice"],[20,"LiteralValue",432],[10,"Into",551],[5,"Predicate",486],[15,"Exception",267],[15,"UnknownValueForDataType",267],[15,"UnknownDataType",267],[15,"UnknownXsdDataType",267],[15,"MultiplicityExceededMaximumNumberOfRows",267],[15,"ExceededMaximumNumberOfRows",267],[15,"CannotGetAnyArgumentIndexes",267],[15,"UnknownNTriplesValue",267]],"b":[[130,"impl-Display-for-Class"],[131,"impl-Debug-for-Class"],[248,"impl-Display-for-RDFStoreError"],[249,"impl-Debug-for-RDFStoreError"],[250,"impl-From%3CParseIntError%3E-for-RDFStoreError"],[251,"impl-From%3CParseError%3E-for-RDFStoreError"],[252,"impl-From%3CError%3E-for-RDFStoreError"],[254,"impl-From%3CError%3E-for-RDFStoreError"],[255,"impl-From%3CError%3E-for-RDFStoreError"],[256,"impl-From%3CError%3E-for-RDFStoreError"],[257,"impl-From%3CError%3E-for-RDFStoreError"],[258,"impl-From%3CNulError%3E-for-RDFStoreError"],[301,"impl-Display-for-Graph"],[302,"impl-Debug-for-Graph"],[378,"impl-Debug-for-Literal"],[379,"impl-Display-for-Literal"],[472,"impl-Display-for-Namespace"],[473,"impl-Debug-for-Namespace"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
